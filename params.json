{"name":"Kratu","tagline":"Client-side analysis framework to create simple and powerful renditions of data. It allows you to dynamically adjust your view of the data to highlight opportunities, issues and correlations in the data.","body":"Kratu Tutorial - Spaceship Comparison Analysis\r\n==============================================\r\nIn this tutorial we'll build a product comparison analysis that can help users figure out which spaceship to buy.\r\nIf you get stuck along the way, you can find the final source code here: [https://github.com/google/kratu/tree/master/examples/spaceshipselector/](https://github.com/google/kratu/tree/master/examples/spaceshipselector)\r\n\r\n## Before you start\r\nTake your time to read the [Installation and Quick start](./index.html).\r\n\r\nThis tutorial assumes you have familiarity with HTML and Javascript.\r\n\r\n## Overview\r\n**How everything fits together:**\r\n![Kratu Overview](http://google.github.com/kratu/img/overview.png)\r\n\r\nIn it's simplest form, Kratu can take a bunch of data (specifically a Javascript array with objects) and renders it.\r\n\r\nYou can easily add pagination and have an awesome table renderer, but it offers so much more if you add a *report definition*.\r\nThis allows you to specify how Kratu will interpret your data, by assigning weights and thresholds to each data point category.\r\nFurther still, you can add *signal definitions* to have full flexibility over how data is processed, formatted and calculated.\r\n\r\nIn this tutorial we'll walk you through the various steps to build a full fledged analysis.\r\n\r\n## Getting started\r\nLet's create a basic HTML page and include a reference to the Kratu library itself and it's stylesheet.\r\n\r\n*Note: We're assuming you place this page on the root of where you checked out Kratu.*\r\n\r\n```html\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\"/>\r\n    <title>Kratu Spaceship Selector</title>\r\n    <link rel=\"stylesheet\" href=\"css/kratu.css\">\r\n    <script src='js/kratu.js'></script>\r\n  </head>\r\n  <body>\r\n    <h1>Kratu Spaceship Selector</h1>\r\n    <div id=\"kratuReport\"></div>\r\n  </body>\r\n</html>\r\n```\r\n\r\n## Loading the data\r\nOur data comes from a CSV-file with all the available spaceship models. You can find it in the [examples/spaceshipselector/](https://github.com/google/kratu/tree/master/examples/spaceshipselector/) folder.\r\n\r\nKratu comes with a simple CSV-loader/parser, so let's use that.\r\nInclude the following lines as the last line in the &lt;head&gt; section:\r\n```html\r\n<script src='js/dataproviders/csv.js'></script>\r\n<script type=\"text/javascript\">\r\n  // We'll do our coding here\r\n</script>\r\n```\r\n\r\nThe following snippet will use our CSV-loader to load our spaceships and log them to our console:\r\n```javascript\r\nwindow.onload = function () {\r\n  var csvProvider = new KratuCSVProvider();\r\n  csvProvider.load('./spaceships_data.csv', function (ships) {\r\n    console.log(ships);\r\n  });\r\n};\r\n```\r\n\r\nYour console should look something like this:\r\n![Kratu Overview](http://google.github.com/kratu/img/tut_console.png)\r\n\r\n## Rendering a basic report\r\nNow that we've loaded our spaceships, let's see if we can get Kratu to list our data directly. Change your code to reflect the following:\r\n\r\n```javascript\r\nwindow.onload = function () {\r\n  var csvProvider = new KratuCSVProvider();\r\n  csvProvider.load('./spaceships_data.csv', function (ships) {\r\n\r\n    // Instantiate a new Kratu object\r\n    var kratu = new Kratu();\r\n\r\n    // Give Kratu our spaceships\r\n    kratu.setEntities(spaceships);\r\n\r\n    // Tell Kratu where to render our report\r\n    kratu.setRenderElement(document.getElementById('kratuReport'));\r\n\r\n    // And render it!\r\n    kratu.renderReport();\r\n\r\n  });\r\n};\r\n```\r\n\r\nAnd we should be able to see our first report:\r\n![Our first report](http://google.github.com/kratu/img/tut_firstreport.png)\r\n\r\n\r\n## Adding some weights\r\nAll right! Looks good, but not super useful as a comparison tool.\r\n\r\nLet's add some weights and thresholds. Weights allow you to tell Kratu how important each datapoint is, relative to the other.\r\nYou can also supply thresholds, so Kratu knows when a datapoint is good or bad (see the *Signals, weights and thresholds* section in the end of this document for more information).\r\n\r\nThe easiest way to supply Kratu with this information, is to define a *report definition*.\r\nThe report definition is a javascript data structure that you can easily serialize to/from [JSON](http://en.wikipedia.org/wiki/JSON).\r\n\r\nHere's a basic report definition that allows us to put weights and thresholds to the different datapoints for our spaceships:\r\n```json\r\n{\r\n  \"signalDefinitionUrl\":\"./spaceships_signaldefinition.js\",\r\n  \"signals\": [\r\n    {\"key\":\"name\", \"name\":\"Name\"},\r\n    {\"key\":\"model\", \"name\":\"Model\"},\r\n    {\"key\":\"imageUrl\", \"name\":\"Image\"},\r\n    {\"key\":\"cost\", \"name\":\"Cost\", \"weight\":100},\r\n    {\"key\":\"resellValueDrop\", \"name\":\"Resell Value Drop\",\r\n     \"weight\":80, \"lMax\": 20, \"lMin\": 50},\r\n    {\"key\":\"engineSize\", \"name\":\"Engine Size\",\r\n     \"weight\":10},\r\n    {\"key\":\"propulsionType\", \"name\":\"Propulsion Type\",\r\n     \"weight\":100, \"lMin\":0, \"lMax\":100},\r\n    {\"key\":\"hyperdrive\", \"name\":\"Hyperdrive\",\r\n     \"weight\":40, \"hMin\":0, \"hMax\":1},\r\n    {\"key\":\"kesselRunRecord\", \"name\":\"Kessel Run Record\",\r\n     \"weight\":20},\r\n    {\"key\":\"freightCapacity\", \"name\":\"Freight Capacity\",\r\n     \"weight\":30},\r\n    {\"key\":\"passengerCapacity\", \"name\":\"Passenger Capacity\",\r\n     \"weight\":40}\r\n    ]\r\n}\r\n```\r\nSave this as *spaceship_reportdefinition.json*\r\n\r\n(As you will see later, you can also supply a signal defintion written in javascript, adding powerful flexibility to your signals. The reason they are separated is to make it easy to store the report definition, enabling individual settings per user of your report. It also allows for code reuse, as the same signal definitions can be use by multiple report definitions).\r\n\r\nTo load this as a file, we use the simple JSON-loader supplied (feel free to use your favorite framwork instead).\r\nInclude the KratuJsonProvider...\r\n```html\r\n<script src='../../js/dataproviders/json.js'></script>\r\n````\r\n...and load *and* set the reportdefinition:\r\n```javascript\r\nwindow.onload = function () {\r\n  var csvProvider = new KratuCSVProvider();\r\n  csvProvider.load('./spaceships_data.csv', function (ships) {\r\n    // Instantiate a new Kratu object\r\n    var kratu = new Kratu();\r\n\r\n    // Give Kratu our spaceships\r\n    kratu.setEntities(spaceships);\r\n\r\n    // Tell Kratu where to render our report\r\n    kratu.setRenderElement(document.getElementById('kratuReport'));\r\n\r\n    var jsonProvider = new KratuJsonProvider();\r\n    jsonProvider.load('./spaceships_reportdefinition.json', \r\n      function (reportDefinition) {\r\n        kratu.setReportDefinition(reportDefinition);\r\n        kratu.renderReport();\r\n      })\r\n  });\r\n};\r\n```\r\n\r\nNow it's starting to look like something:\r\n\r\n![Added some weights](http://google.github.com/kratu/img/tut_addedweights.png)\r\n\r\n## Ranking and formatting\r\nBut we can do even better!\r\n\r\nSurely we need to consider price and other signals. We don't want to set specific limits to these, instead we want them to be dynamically ranked based on the other values.\r\n\r\nIn addition, we want to format our values properly, and we want to display the images of the models.\r\n \r\nWe would also want to make the user able to toggle which columns s/he cares about.\r\n\r\nTo do this, we need to add a bit of javascript:\r\nFirst, let's update our report definition, so that Kratu knows that we will use a Javascript file to tell Kratu how each signal should be interpreted:\r\n\r\n```json\r\n{\r\n  \"signalDefinitionUrl\":\"./spaceships_signaldefinition.js\",\r\n  \"signals\": [\r\n    {\"key\":\"name\", \"name\" : \"Name\"},\r\n    ....\r\n```\r\n\r\nThen, let's create the file *spaceships_signaldefinition.js* and add the following to it:\r\n```javascript\r\n function KratuSignalDefinitions(kratu) {\r\n  // For name and model, we want to use the overall score.\r\n  // This can be done by using the built in sumScore function\r\n  this.name = {\r\n    calculateWeight: kratu.calculations.sumScore\r\n  };\r\n  this.model = {\r\n    calculateWeight: kratu.calculations.sumScore\r\n  };\r\n\r\n  // We want to be able to render the image using the url in\r\n  // A custom format function allows us to do this\r\n  this.imageUrl = {\r\n    format: function (value, elm) {\r\n      var img = document.createElement('img');\r\n      img.src = value;\r\n      elm.classList.add('spaceshipImage');\r\n      elm.appendChild(img);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Define common event handler signals to be togglable\r\n  var toggleSignal = {click: kratu.eventHandlers.toggleSignal};\r\n\r\n  // For the other signals, we're using built in formatters, and\r\n  // built in ranking calculations instead of thresholds\r\n  this.cost = {\r\n    format: kratu.formatters.money,\r\n    calculateWeight: kratu.calculations.rankSmallToLarge,\r\n    headerEventHandlers: toggleSignal\r\n  };\r\n  this.resellValueDrop = {\r\n    format: kratu.formatters.percentage,\r\n    headerEventHandlers: toggleSignal\r\n  };\r\n  this.engineSize = {\r\n    format: kratu.formatters.singleDecimal,\r\n    calculateWeight: kratu.calculations.rankLargeToSmall,\r\n    headerEventHandlers: toggleSignal\r\n  };\r\n  this.hyperdrive = {\r\n    format: kratu.formatters.boolean,\r\n    headerEventHandlers: toggleSignal\r\n  };\r\n  this.kesselRunRecord = {\r\n    format: kratu.formatters.integer,\r\n    calculateWeight: kratu.calculations.rankSmallToLarge,\r\n    headerEventHandlers: toggleSignal\r\n  };\r\n  this.freightCapacity = {\r\n    calculateWeight: kratu.calculations.rankLargeToSmall,\r\n    headerEventHandlers: toggleSignal\r\n  };\r\n  this.passengerCapacity = {\r\n    format: kratu.formatters.integer,\r\n    calculateWeight: kratu.calculations.rankLargeToSmall,\r\n    headerEventHandlers: toggleSignal\r\n  };\r\n}\r\n```\r\n(Have a look through the comments to better understand what's going on)\r\n\r\nNo need to update the code in our page, as Kratu will automatically load the specified signal definition supplied in the report definition.\r\n\r\n## Final report\r\nCongrats! We now have a complete spaceship comparison tool!\r\nNotice the toggled columns:\r\n![Final report](http://google.github.com/kratu/img/tut_finalreport.png)\r\n\r\n# More Info\r\nKratu code itself is documented using JSDoc.\r\n\r\nBelow you will find detailed documentation on most of Kratu's features.\r\n\r\nTake a deep dive in the examples included for more advanced usage.\r\n\r\n### Summaries and averages\r\nYou can easily add summary and average rows to your report through the _report definition_.\r\nAdd a _summaryRows_ key to the _report definition_ with an array containing one object for each row you want to add.\r\nThe row objects must have keys for _type_ (_average_ or _sum_) and _location_ (_top_ or _bottom_):\r\n\r\n```json\r\n  \"summaryRows\":[\r\n    {\r\n      \"location\":\"top\",\r\n      \"type\"    :\"average\",\r\n    },\r\n    {\r\n      \"location\":\"bottom\",\r\n      \"type\"    :\"sum\",\r\n    }\r\n```\r\n\r\nFor an advanced usage, check out the [AdWords Healtcheck example](https://github.com/google/kratu/tree/master/examples/adwordshealtcheck).\r\n\r\n\r\n### Data composition\r\nDatapoints for a given entity can be taken directly and unprocessed from the data source, or it can be combined by specifying a getData-function in the signal definition.\r\nAs an example, consider the following:\r\n\r\n```javascript\r\nthis.resellValue = {\r\n  getData:function (spaceship) {\r\n    return spaceship.cost - (spaceship.cost * spaceship.resellValueDrop / 100);\r\n  }\r\n};\r\n\r\n```\r\nYou can even introduce new signals, but remember to include these in the report definition, as this is what defines what ends up in the final report.\r\n\r\n\r\n### Pagination\r\nKratu has built in pagination support. This helps rendering times when you're dealing with a lot of data.\r\nSee the [bugreport example](https://github.com/google/kratu/tree/master/examples/bugreport) for a fully implemented solution.\r\n\r\nThe methods supplied to support pagination are as follows:\r\n\r\n* setPageSize(pageSize)\r\n* getPageSize()\r\n* clearPageSize()\r\n* getNumPages()\r\n* setCurrentPage(currentPage)\r\n* getCurrentPage()\r\n* renderPage(?pageNumber, ?callback)\r\n* renderCurrentPage(?callback)\r\n* renderPreviousPage(?callback)\r\n* renderNextPage(?callback)\r\n\r\n### Eventhandlers\r\nKratu supports adding event handlers to both the cells in the report as well as the header. All standard Javascript events are supported.\r\nSimply add your handlers in the _signal defintion_ like so:\r\n\r\n```javascript\r\nthis.signal = {\r\n  headerEventHandlers: {\r\n    click: function (args) {\r\n      var kratu = this;\r\n      //...\r\n    }\r\n  },\r\n  cellEventHandlers: {\r\n    click: function (args) {\r\n      var kratu = this;\r\n      //...\r\n    }\r\n  }\r\n};\r\n```\r\n\r\nYour handler will be called with the Kratu instance as the context object, and it will be supplied with an argument object comprising of \r\n* elm - the calling element object\r\n* evt - the event object\r\n* signal - the signal object\r\n* entity - the data object (only for cellEventHandlers)\r\n* score - the calculated score for this signal and entity (only for cellEventHandlers)\r\n* value - the value for this signal and entity (only for cellEventHandlers)\r\n\r\n### Toggling of signals\r\nKratu has built in support for toggling which signal goes into the overall calculation and prioritization of data.\r\nTo add toggling, simply add the built in _kratu.eventHandlers.toggleSignal_ as a click handler in the signal definitions:\r\n\r\n```javascript\r\nthis.signalToBeTogglable = {\r\n  headerEventHandlers: {\r\n    click: kratu.eventHandlers.toggleSignal\r\n  }\r\n};\r\n```\r\n### Dynamic Adjustments of signals\r\nSimilarly to toggling, you can add UI for adjustments of signals (see the [AdWords Healtcheck example](https://github.com/google/kratu/tree/master/examples/adwordshealtcheck) for a working example):\r\n\r\n```javascript\r\nthis.signalToBeTogglable = {\r\n  headerEventHandlers: {\r\n    click: kratu.eventHandlers.displaySignalAdjustment\r\n  }\r\n};\r\n```\r\n\r\n### Formatting\r\nSignals can format their values and the cell they are presented in by supplying a format function in the _signal definition_;\r\n\r\n```javascript\r\nthis.signalToBeFormatted = {\r\n  format:function (value, cell) {\r\n    cell.style.textAlign = 'center';\r\n    return value+' kg';\r\n  }\r\n};\r\n```\r\n\r\nKratu supplies built in formatters that can be used like this:\r\n\r\n```javascript\r\nthis.signalToBeFormatted = {\r\n  format:kratu.formatters.percentage\r\n};\r\n```\r\n\r\nAvailable formatters are:\r\n* boolean\r\n* decimal\r\n* percentage\r\n* money\r\n* singleDecimal\r\n* integer\r\n* string\r\n\r\n### Custom score calculations\r\nYou can define how Kratu should calculate a score by defining a calculateScore function in the _signal definition_:\r\n\r\n```javascript\r\nthis.signal = {\r\n  calculateScore:function (spaceship) {\r\n    var signal = this;\r\n    if (spaceship.isPoorPerformer) return 0;\r\n    else return 1 * signal.weight;\r\n  }\r\n};\r\n```\r\n(Calling context object is the Kratu Signal object.)\r\n\r\nAdvanced: If your function returns another function, this will be called after all signals have been calculated with a summary object containing the sum of all scores and the sum of all weights\r\nThis allows you to do intermediate staged calculations which you can use in the summaries.\r\n\r\n### Sum Score for a signal\r\nIf you want a signal to be marked with the overall score and color of the entity, you can utilize the built in sumScore mechanism as we saw in the name and model signals above:\r\n\r\n```javascript\r\nthis.name = {\r\n  calculateWeight: kratu.calculations.sumScore\r\n};\r\n```\r\n\r\n### Ranking and Sum Score\r\nIf your signal has an unknown range of potential value (ie. you can't set predetermined thresholds), you might want to consider using the built in rank calculation.\r\nThis looks at all your values for the particular signal and uses the maximum and minium value as boundaries for a distributed percentage. It then multiplies this value with the weight, yielding the score for that signal.\r\n\r\nLike we saw above, this can look like this:\r\n\r\n```javascript\r\nthis.kesselRunRecord = {\r\n  calculateWeight: kratu.calculations.rankSmallToLarge,\r\n};\r\nthis.freightCapacity = {\r\n  calculateWeight: kratu.calculations.rankLargeToSmall,\r\n};\r\n```\r\n\r\n### Signals, weights and thresholds\r\n\r\nA _Kratu Signal_ is basically what ends up as the column in your report\r\nThe Kratu Signal gets defined by the _report definition_ and values found here will override any values specified in the optional _signal definition_.\r\nUnless specified otherwise, each signal get's a calculated score. This score is based upon the _weight_ of the signal and the _thresholds_ of the signals (see below).\r\n\r\nThe report definition can describe the following attributes of a signal:\r\n\r\n<dl>\r\n  <dt>key</dt><dd>String (**mandatory**), identifying name of the signal</dd>\r\n  <dt>name</dt><dd>String, descriptive name of signal</dd>\r\n  <dt>weight</dt><dd>Float, Maximal impact signal can represent (0.0 - 100.0)</dd>\r\n  <dt>lMax</dt><dd>Float, lowest point of low threshold where signal yields maximum opportunity. When getData <= lMax, calc. weight = weight</dd>\r\n  <dt>lMin</dt><dd>Float, lowest point of high threshold where signal yields minimum opportunity. When getData > lMin (and < jMin, if defined), calculated weight = 0</dd>\r\n  <dt>hMin</dt><dd>Float, lowest point of high threshold where signal yields minimum opportunity. When getData < hMin (and > lMin, if defined), calculated weight = 0</dd>\r\n  <dt>hMax</dt><dd>Float, highest point of high threshold where signal yields maximum opportunity.  When getData >= hMax, calculated weight = weight</dd>\r\n  <dt>scaleExponent</dt><dd>float, used to ease the curve between lMax/lMin and hMin/hMax - see adjustment of signal to visualize.</dd>\r\n</dl>\r\n\r\nThe signal definition can additionaly describe:\r\n\r\n<dl>\r\n  <dt>getData</dt><dd>Function, method that will be called to get the data for this signal. If not provided, the signals key will be used to lookup the corresponding value in the account-object</dd>\r\n  <dt>range</dt><dd>Object, provides boundaries for adjusting the signal and should contain an object with a min, max and step key/value</dd>\r\n  <dt>format</dt><dd>Function, function that takes the return data from getData as first argument</dd>\r\n  <dt>isBoolean</dt><dd>Boolean, flag to show that this is a boolean signal</dd>\r\n  <dt>hasCalculation</dt><dd>Function, method that determines wether to calculate a score for this signal</dd>\r\n  <dt>calculateWeight</dt><dd>Function, overridable method for calculating the score for this signal.</dd>\r\n</dl>","google":"UA-39026530-1","note":"Don't delete this file! It's used internally to help with page regeneration."}